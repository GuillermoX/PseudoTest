package app;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import javax.swing.*;
import javax.swing.undo.*;
import java.awt.event.*;
import java.awt.*;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.awt.Color;
import java.awt.Desktop;
import java.net.URI;
import javax.swing.plaf.basic.BasicScrollBarUI;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.net.URISyntaxException;

import AST.Ast;
import GUI.TextLineNumber;

/**
 *
 * @author guillermo
 */
public class AppGUI extends javax.swing.JFrame {
    


    // Variables declaration - do not modify                     
    private javax.swing.JButton TranslateButton;
    private javax.swing.JTextArea codeTextArea;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextArea pseudoTextArea;
    // End of variables declaration                
    
    //Custom variable declaration
    private TextLineNumber numerationPseudo;
    private TextLineNumber numerationCode;


    //Logic variables
    String lastPseudoSaved;
    String pathLastSave;

    Ast ast;

    /**
     * Creates new form Menu
     */
    public AppGUI(Ast ast) {
        this.ast = ast;
        initIcon();
        initComponents();
        initLogic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {



        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        TranslateButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        codeTextArea = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        pseudoTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();


        customScrollBarSettings(jScrollPane1);
        customScrollBarSettings(jScrollPane2);
        customScrollBarSettings(jScrollPane3);

        //Custom components
        //numerationPseudo = new TextLineNumber(pseudoTextArea);
        //End of custom components


        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("PseudoTest");
        setResizable(false);
        setSize(new java.awt.Dimension(1200, 750));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeWindow(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setToolTipText("");
        jPanel3.setMinimumSize(new java.awt.Dimension(1200, 750));
        jPanel3.setPreferredSize(new java.awt.Dimension(1200, 750));

        jPanel1.setBackground(new java.awt.Color(24, 24, 24));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65)));

        jTextArea3.setBackground(new java.awt.Color(41, 41, 41));
        jTextArea3.setColumns(20);
        jTextArea3.setFont(new java.awt.Font("DialogInput", 0, 15)); // NOI18N
        jTextArea3.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea3.setRows(5);
        jTextArea3.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 1)));
        jScrollPane3.setViewportView(jTextArea3);

        TranslateButton.setBackground(new java.awt.Color(45, 45, 45));
        TranslateButton.setForeground(new java.awt.Color(255, 255, 255));
        TranslateButton.setText("Translate");
        TranslateButton.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(70, 70, 70), 1, true));
        TranslateButton.setFocusable(false);
        TranslateButton.setMargin(new java.awt.Insets(2, 20, 2, 14));
        TranslateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                translateFunct(evt);
            }
        });

        jScrollPane2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65)));

        codeTextArea.setEditable(false);
        codeTextArea.setBackground(new java.awt.Color(41, 41, 41));
        codeTextArea.setColumns(20);
        codeTextArea.setFont(new java.awt.Font("DialogInput", 0, 15)); // NOI18N
        codeTextArea.setForeground(new java.awt.Color(255, 255, 255));
        codeTextArea.setRows(5);
        codeTextArea.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1)));
        codeTextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        codeTextArea.setDisabledTextColor(new java.awt.Color(102, 102, 102));
        jScrollPane2.setViewportView(codeTextArea);

        //Custom code
        codeTextArea.setTabSize(4);

        numerationCode = new TextLineNumber(codeTextArea);
        numerationCode.setBackground(new Color(41,41,41));
        numerationCode.setForeground(new Color(120,120,120));
        numerationCode.setCurrentLineForeground(new Color(120, 120, 120));
        numerationCode.setFont(new java.awt.Font("DialogInput", 0, 15));
        jScrollPane2.setRowHeaderView(numerationCode);
        //End of custom code


        jScrollPane1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 65, 65)));

        pseudoTextArea.setBackground(new java.awt.Color(41, 41, 41));
        pseudoTextArea.setColumns(20);
        pseudoTextArea.setFont(new java.awt.Font("DialogInput", 0, 15)); // NOI18N
        pseudoTextArea.setForeground(new java.awt.Color(255, 255, 255));
        pseudoTextArea.setRows(5);
        pseudoTextArea.setText("$ Put your pseudocode here !");
        pseudoTextArea.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, javax.swing.BorderFactory.createEmptyBorder(1, 20, 1, 1)));
        pseudoTextArea.setCaretColor(new java.awt.Color(255, 255, 255));
        pseudoTextArea.setDisabledTextColor(new java.awt.Color(230, 230, 230));
        pseudoTextArea.setMargin(new java.awt.Insets(5, 50, 5, 15));
        jScrollPane1.setViewportView(pseudoTextArea);

        //Custom code

        pseudoTextArea.setTabSize(4);
        
        numerationPseudo = new TextLineNumber(pseudoTextArea);
        numerationPseudo.setBackground(new Color(41,41,41));
        numerationPseudo.setForeground(new Color(120,120,120));
        numerationPseudo.setFont(new java.awt.Font("DialogInput", 0, 15));
        numerationPseudo.setCurrentLineForeground(new Color(200, 200, 200));
        jScrollPane1.setRowHeaderView(numerationPseudo);


        // Create UndoManager
        UndoManager undoManager = new UndoManager();

        pseudoTextArea.getDocument().addUndoableEditListener(e -> undoManager.addEdit(e.getEdit()));

        // Ctrl+Z to undo
        pseudoTextArea.getInputMap().put(KeyStroke.getKeyStroke("control Z"), "Undo");
        pseudoTextArea.getActionMap().put("Undo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (undoManager.canUndo()) {
                    undoManager.undo();
                }
            }
        });

        // Ctrl+Y to redo
        pseudoTextArea.getInputMap().put(KeyStroke.getKeyStroke("control Y"), "Redo");
        pseudoTextArea.getActionMap().put("Redo", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (undoManager.canRedo()) {
                    undoManager.redo();
                }
            }
        });
        //End of custom code

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 799, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 1508, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(TranslateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(686, 686, 686))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TranslateButton, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 632, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jMenuBar1.setBackground(new java.awt.Color(30, 30, 30));
        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 102)));

        jMenu1.setForeground(new java.awt.Color(255, 255, 255));
        jMenu1.setText("File");

        jMenuItem1.setBackground(new java.awt.Color(30, 30, 30));
        jMenuItem1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem1.setText("Import PseudoCode");
        jMenuItem1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importFile(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem5.setBackground(new java.awt.Color(30, 30, 30));
        jMenuItem5.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem5.setText("Save PseudoCode");
        jMenuItem5.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePseudo(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem3.setBackground(new java.awt.Color(30, 30, 30));
        jMenuItem3.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem3.setText("Save PseudoCode as");
        jMenuItem3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePseudoInFile(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setBackground(new java.awt.Color(30, 30, 30));
        jMenuItem4.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem4.setText("Save C code as");
        jMenuItem4.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveCodeInFile(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setForeground(new java.awt.Color(255, 255, 255));
        jMenu2.setText("Help");

        jMenuItem2.setBackground(new java.awt.Color(30, 30, 30));
        jMenuItem2.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem2.setText("How to Use");
        jMenuItem2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openHelp(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 1556, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 807, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>  
    
    private void initIcon(){

        try{
            Path initCode = Paths.get(PseudoTest.class.getProtectionDomain().getCodeSource().getLocation().toURI());
            if(initCode.toString().endsWith(".jar")){
                
                Image icon = Toolkit.getDefaultToolkit().getImage(initCode.getParent().toString() + "./icon/icon.png");
                System.out.println(initCode.getParent().toString() + "/icon/icon.png");
                this.setIconImage(icon);

            }
            else{
                System.out.println(initCode.toString());
            }
        }
        catch(URISyntaxException e){

        }
    }
    
    
    private void initLogic(){



        // Ctrl+Z to undo
        pseudoTextArea.getInputMap().put(KeyStroke.getKeyStroke("control S"), "Save");
        pseudoTextArea.getActionMap().put("Save", new AbstractAction() {
            @Override
            public void actionPerformed(ActionEvent e) {
                savePseudo(e);
            }
        });

        pathLastSave = "";

        try{
            Path initCode = Paths.get(PseudoTest.class.getProtectionDomain().getCodeSource().getLocation().toURI());
            String path;
            if(initCode.toString().endsWith(".jar")){
                path = initCode.getParent().resolve("./code/initPseudo.pseudo").toAbsolutePath().toString();
            }
            else{
                path = "./code/initPseudo.pseudo";
            }
            this.pseudoTextArea.setText(getStringFromFile(path));
        }
        catch(IOException e){
            pseudoTextArea.setText("$ Put your pseudocode here !");
        }
        catch(URISyntaxException e){

            pseudoTextArea.setText("$ Put your pseudocode here !");
        }

        lastPseudoSaved = this.pseudoTextArea.getText();
    }

    private void customScrollBarSettings(JScrollPane scrollPane){

        scrollPane.getVerticalScrollBar().setUI(new BasicScrollBarUI() {
                @Override
                protected void configureScrollBarColors() {
                    this.thumbColor = new Color(50, 50, 50);  // Azul
                    this.trackColor = new Color(30, 30, 30);  // Gris claro
                }

                @Override
                protected JButton createDecreaseButton(int orientation) {
                    return createZeroButton();
                }

                @Override
                protected JButton createIncreaseButton(int orientation) {
                    return createZeroButton();
                }

                private JButton createZeroButton() {
                    JButton button = new JButton();
                    button.setPreferredSize(new Dimension(0, 0));
                    button.setMinimumSize(new Dimension(0, 0));
                    button.setMaximumSize(new Dimension(0, 0));
                    return button;
                }
        });



        scrollPane.getHorizontalScrollBar().setUI(new BasicScrollBarUI() {
                @Override
                protected void configureScrollBarColors() {
                    this.thumbColor = new Color(50, 50, 50);  // Azul
                    this.trackColor = new Color(30, 30, 30);  // Gris claro
                }

                @Override
                protected JButton createDecreaseButton(int orientation) {
                    return createZeroButton();
                }

                @Override
                protected JButton createIncreaseButton(int orientation) {
                    return createZeroButton();
                }

                private JButton createZeroButton() {
                    JButton button = new JButton();
                    button.setPreferredSize(new Dimension(0, 0));
                    button.setMinimumSize(new Dimension(0, 0));
                    button.setMaximumSize(new Dimension(0, 0));
                    return button;
                }
        });

        // Cambiar color de la esquina
        JPanel corner = new JPanel();
        corner.setBackground(new Color(30, 30, 30));
        scrollPane.setCorner(JScrollPane.LOWER_RIGHT_CORNER, corner);


        JPanel bottomLeftCorner = new JPanel();
        bottomLeftCorner.setBackground(new Color(41, 41, 41));
        scrollPane.setCorner(JScrollPane.LOWER_LEFT_CORNER, bottomLeftCorner);
    }

    private void translateFunct(java.awt.event.ActionEvent evt) {                                
        // TODO add your handling code here:
        String code = this.pseudoTextArea.getText();
        try{
            ast.loadCode(code);
            String outCode = ast.printCodeString();
            this.codeTextArea.setText(outCode);
        }
        catch(Exception e){
            this.jTextArea3.append(getCurrentTime() + " " + e.getMessage() + "\n");
        }

    }                
    
    private void importFile(java.awt.event.ActionEvent evt) {                            
        JFileChooser fileChooser = new JFileChooser();

        // Mostrar el diálogo de selección
        int result = fileChooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION && sureToClose()) {
            File selectFile = fileChooser.getSelectedFile();
            try{
                String code = getStringFromFile(selectFile.getAbsolutePath());
                this.pseudoTextArea.setText(code);
                this.lastPseudoSaved = code;
            }
            catch(IOException e){
                this.jTextArea3.append( getCurrentTime() + " Unable to open file: " + selectFile.getAbsolutePath() + "\n");
            }

        }    
    } 


    private boolean saveInFile(JTextArea textArea){
        JFileChooser fileChooser = new JFileChooser();

        // Mostrar el diálogo de selección
        fileChooser.setDialogTitle("Save file as...");
        int result = fileChooser.showSaveDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File selectFile = fileChooser.getSelectedFile();
            if(selectFile.exists()){
                int answer = JOptionPane.showConfirmDialog(null,
                        "File exists, do you want to override?",
                        "Yes, I want to override",
                        JOptionPane.YES_NO_OPTION);

                if (answer != JOptionPane.YES_OPTION) {
                    this.jTextArea3.append(getCurrentTime() + " Saving file canceled by user \n");
                    return false;
                } 
            }
            try{
                String code = textArea.getText();
                writeStringIntoFile(code, selectFile.getAbsolutePath());
                pathLastSave = selectFile.getAbsolutePath();
                this.jTextArea3.append(getCurrentTime() + " Saved file in: " + selectFile.getAbsolutePath() + "\n");
                return true;
            }
            catch(IOException e){
                this.jTextArea3.append( getCurrentTime() + " Unable to write file: " + selectFile.getAbsolutePath() + "\n");
                return false;
            }

        }
        else{
            return false;
        }
    }

    private void savePseudo(java.awt.event.ActionEvent evt){
        if(pathLastSave.compareTo("") != 0){

            File file = new File(pathLastSave);
            if(file.exists()){
                try{

                    String code = pseudoTextArea.getText();
                    writeStringIntoFile(code, pathLastSave);
                    this.jTextArea3.append(getCurrentTime() + " Saved file in: " + pathLastSave + "\n");
                }
                catch(IOException e){
                    this.jTextArea3.append( getCurrentTime() + " Unable to write file: " + pathLastSave + "\n");
                }
            }
            else{ 
                this.jTextArea3.append( getCurrentTime() + " File: \"" + pathLastSave + "\" does not exist anymore\n");
            }
            
        }
        else{
            savePseudoInFile(evt);
        }
    }

    private void savePseudoInFile(java.awt.event.ActionEvent evt){
        if(saveInFile(this.pseudoTextArea)){
            lastPseudoSaved = this.pseudoTextArea.getText();
        }
    }

    private void saveCodeInFile(java.awt.event.ActionEvent evt){
        saveInFile(this.codeTextArea);
    }

    private void openHelp(java.awt.event.ActionEvent evt){

            try {
                Desktop desktop = Desktop.getDesktop();

                // Verifica si la acción de navegar está soportada
                if (desktop.isSupported(Desktop.Action.BROWSE)) {
                    URI uri = new URI("https://github.com/GuillermoX/PseudoTest");
                    desktop.browse(uri);
                } else {
                    this.jTextArea3.append(getCurrentTime() + " Browser not supported \n");
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    private void closeWindow(java.awt.event.WindowEvent evt){
        if(sureToClose()) System.exit(0);
    }

    private boolean sureToClose(){

        if(lastPseudoSaved.compareTo(this.pseudoTextArea.getText()) != 0){
            int answer = JOptionPane.showConfirmDialog(null,
                        "Close without saving?",
                        "Close without saving",
                        JOptionPane.YES_NO_OPTION);
            if(answer == JOptionPane.YES_OPTION){
                return true;
            }
            else{
                return false;
            }

        }
        else return true;
    }

    private static void writeStringIntoFile(String code, String path) throws IOException{
        BufferedWriter br = new BufferedWriter(new FileWriter(path));

        br.write(code);

        br.close();
    }

    public static String getStringFromFile(String filePath) throws IOException{
        BufferedReader bf = new BufferedReader(new FileReader(filePath));
        String code = "";

        String line = bf.readLine();
        while( line != null){
            code += line + "\n";
            line = bf.readLine();
        }

        return code;
    }

    private static String getCurrentTime(){
        return "(" + LocalTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")) + ")";
    }
    
}